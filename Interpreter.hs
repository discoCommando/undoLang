-- automatically generated by BNF Converter
module Interpreter where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )

import LexUndo
import ParUndo
import SkelUndo
import PrintUndo
import AbsUndo
import Evaluation


import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

newLine :: String
newLine = " NEWLINE "

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok  tree -> do putStrLn "\nParse Successful!"
                          showTree v tree
                          --execProg tree



showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree
      


main :: IO ()
main = do args <- getArgs
          case args of
            [] -> do
		contents <- hGetContents stdin
		let cont = unlines (map (\s -> s) (lines contents))
		case (pProgram $ myLLexer cont) of
			Ok prog -> putStrLn $ showprog prog
			Bad s -> putStrLn s
            (f:fs) -> do 
		contents <- readFile f
		let cont = unlines (map (\s -> s) (lines contents))
		case (pProgram $ myLLexer cont) of
			Ok prog -> putStrLn $ showprog prog
			Bad s -> putStrLn s
		





